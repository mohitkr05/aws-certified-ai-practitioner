{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aws-certified-ai-practitioner AWS Certified AI Practitioner (AIF-C01) exam","title":"aws-certified-ai-practitioner"},{"location":"#aws-certified-ai-practitioner","text":"AWS Certified AI Practitioner (AIF-C01) exam","title":"aws-certified-ai-practitioner"},{"location":"TS1-2/bedrock/","text":"","title":"Bedrock"},{"location":"TS1-2/forecast/","text":"","title":"Forecast"},{"location":"TS1-2/fraud-detector/","text":"","title":"Fraud detector"},{"location":"TS1-2/kendra/","text":"Amazon Kendra Document What is Kendra? Intelligent Search Service : Amazon Kendra is an intelligent search service that uses natural language processing (NLP) and machine learning to provide relevant answers to user queries from a variety of data sources. Indexes : Kendra creates an index that holds the contents of your documents in a searchable format. You can create indexes using the console, AWS CLI, or AWS SDKs. Data Sources : Kendra can connect to various data repositories (e.g., Amazon S3, Microsoft SharePoint, databases) to index documents automatically. It supports numerous data source types and formats. Direct Document Addition : If documents aren\u2019t stored in a repository, you can use the BatchPutDocument API to add documents directly to an index. FAQs : Kendra supports indexing FAQ files stored in Amazon S3 in various formats, such as CSV and JSON, allowing for quick retrieval of commonly asked questions. Search Functionality : Users can perform searches using natural language queries, keyword searches, or queries with specific criteria for filtering responses. Kendra uses all document information, including metadata, to determine relevance. Customizable Search Experience : Kendra allows you to create custom fields and use existing document fields to filter and sort search results. You can adjust relevance to fine-tune search results based on field importance. Security : Kendra integrates with AWS Identity and Access Management (IAM) to manage access to indexes and documents, ensuring search results reflect your organization's security model. Integration with AWS Services : Amazon Kendra integrates with other AWS services like Amazon Lex, enabling the creation of chatbots that can answer user queries by searching Kendra indexes. Getting started with Kendra Enriching of Documents To enrich documents during ingestion with Amazon Kendra, you can use the Custom Document Enrichment feature. Here\u2019s how it works: - Inline Configurations: You can apply basic logic or inline configurations to modify your document metadata and content during the ingestion process. This might include operations like scrubbing personally identifiable information or adding metadata. - Lambda Functions: For more advanced data manipulations, you can invoke AWS Lambda functions during the document ingestion. Lambda functions can perform tasks like Optical Character Recognition (OCR) on images, translation of text, or extracting text from images. These functions allow for complex operations that go beyond simple metadata manipulation. Data Flow: Configuration: You configure Custom Document Enrichment either when creating or updating your data source or when directly indexing documents into Amazon Kendra. Basic Operations: Amazon Kendra first applies any inline configurations or basic logic you\u2019ve set to alter your data. Advanced Manipulations: If advanced data manipulation is required, Kendra applies Lambda functions to either the original raw documents or the structured parsed documents, depending on your configuration. Ingestion: The modified documents are then ingested into Amazon Kendra. Validation: If the configuration for enrichment is not valid at any point, Amazon Kendra will throw an error, ensuring only correctly configured documents are ingested\u200b Quotas Quota Description Default Limit Edition Adjustable Index Quotas Maximum number of indexes per account 10 Developer, Enterprise Yes Amount of text extracted for an index in a single unit 3 GB Developer No Amount of text extracted for an index in a single unit 30 GB Enterprise Yes Data Source Connector Quotas Maximum number of data source connectors per index 5 Developer No Maximum number of data source connectors per index 50 Enterprise Yes Maximum size of a single document or raw file 50 MB Developer, Enterprise Yes Maximum number of S3 prefixes in the access control list 100 Developer, Enterprise No FAQ Quotas Maximum number of FAQs per index 30 Developer, Enterprise Yes Maximum size of 1 FAQ 5 MB Developer, Enterprise Yes Maximum number of results returned for FAQ 4 Developer, Enterprise Yes Maximum number of characters allowed for an FAQ question 300 Developer, Enterprise No Maximum number of characters in an FAQ answer 2000 Developer, Enterprise No Thesaurus Quotas Maximum number of thesauri per index 1 Developer, Enterprise No Maximum size of a thesaurus file 5 MB Developer, Enterprise Yes Maximum number of synonym rules per thesaurus 10,000 Developer, Enterprise Yes Maximum number of synonyms per term in all thesauri 10 Developer, Enterprise No Amazon Kendra Experience Quotas Maximum number of Amazon Kendra experiences per index 50 Developer, Enterprise Yes Query and Search Results Quotas Amount of queries per second for an index in a single unit 0.05 (Developer), 0.1 (Enterprise) Developer, Enterprise Yes Maximum number of characters per query text 1000 Developer, Enterprise Yes Maximum number of search results per query 100 Developer, Enterprise Yes Maximum number of search results per page 100 Developer, Enterprise Yes Query Suggestions Quotas Maximum number of query suggestions returned per call 10 Developer, Enterprise Yes Maximum number of fields/attributes for query suggestions 10 Developer, Enterprise Yes Maximum size of a block list text file 2 MB Developer, Enterprise Yes Maximum number of items in a block list 20,000 Developer, Enterprise Yes Document Quotas Maximum size of a single document or raw file using BatchPutDocument API 5 MB Developer, Enterprise Yes Maximum amount of text extracted from a single document 5 MB Developer, Enterprise No Maximum number of custom fields/attributes per index 500 Developer, Enterprise No Pricing Amazon Kendra pricing is based on several factors, including the number of indexes created, the volume of documents indexed, the frequency of queries, and the specific edition of Kendra being used. Here\u2019s an overview of how Amazon Kendra pricing works: 1. Editions Amazon Kendra offers two main editions: - Developer Edition : This edition is intended for smaller-scale development and testing purposes. It is less expensive and comes with a lower capacity limit for indexes, documents, and queries. - Enterprise Edition : This edition is designed for production use in larger-scale environments. It offers higher capacity limits and additional features suitable for enterprise-scale applications. 2. Pricing Components Amazon Kendra pricing consists of several components, which vary depending on the edition: Indexing : Documents Indexed : The cost of indexing documents depends on the amount of text extracted from the documents. The Developer Edition includes up to 3 GB of extracted text, while the Enterprise Edition includes up to 30 GB. If you exceed these amounts, additional charges apply based on the volume of text processed. Frequency of Index Synchronization : When you synchronize an index with a data source, there are additional costs based on the number of times synchronization occurs. More frequent synchronization leads to higher costs. Queries : Number of Queries : Amazon Kendra charges based on the number of queries made to the index. The Developer Edition allows for a limited number of queries (up to approximately 4,000 queries per day or 0.05 queries per second). The Enterprise Edition allows for more queries (up to approximately 8,000 queries per day or 0.1 queries per second). Exceeding these limits will incur additional costs. Query Suggestions : If you use Amazon Kendra\u2019s query suggestions feature, there are additional costs based on the number of query suggestions returned. Storage : Document Storage : The storage of documents and indexed content in Amazon Kendra is also a pricing component. The size of the stored data influences the cost, particularly if the amount of data stored exceeds the quota included with the index. Thesauri and FAQs : Custom Thesauri : Creating and using custom thesauri involves additional charges based on the number of synonyms and the size of the thesaurus file. FAQs : Adding FAQ documents to an index also has associated costs, particularly if the number of FAQs exceeds the allowed quota. 3. Additional Features and Charges Amazon Kendra Experiences : Creating experiences (custom search experiences that are surfaced in different interfaces) incurs additional charges depending on the number and type of experiences created. Data Source Connectors : Using connectors to ingest data from various repositories can also lead to additional costs, particularly when using connectors that are outside of the free data sources provided. Document Enrichment : If you utilize Custom Document Enrichment, which involves running AWS Lambda functions to process and enrich documents during ingestion, you will incur additional costs for the compute time and resources used by Lambda. 4. Free Tier Amazon Kendra offers a free tier for the Developer Edition, which includes: - 750 hours of use for the first 30 days. - Up to 5 indexes with up to 5 data sources each. - 10,000 documents or 3 GB of extracted text . This free tier is ideal for new users to explore Kendra and develop initial search applications without incurring costs. 5. Region-Based Pricing Pricing for Amazon Kendra may vary slightly depending on the AWS region where the service is being used. It is important to check the specific pricing for your region on the AWS pricing page. 6. Monitoring and Controlling Costs To manage costs effectively, you can: - Monitor Usage : Use AWS CloudWatch to track usage and spending. - Set Budgets and Alerts : Use AWS Budgets to set usage limits and receive notifications when nearing these limits. - Optimize Usage : Choose the appropriate edition, features, and data sources based on your specific needs and budget.","title":"Amazon Kendra"},{"location":"TS1-2/kendra/#amazon-kendra","text":"Document","title":"Amazon Kendra"},{"location":"TS1-2/kendra/#what-is-kendra","text":"Intelligent Search Service : Amazon Kendra is an intelligent search service that uses natural language processing (NLP) and machine learning to provide relevant answers to user queries from a variety of data sources. Indexes : Kendra creates an index that holds the contents of your documents in a searchable format. You can create indexes using the console, AWS CLI, or AWS SDKs. Data Sources : Kendra can connect to various data repositories (e.g., Amazon S3, Microsoft SharePoint, databases) to index documents automatically. It supports numerous data source types and formats. Direct Document Addition : If documents aren\u2019t stored in a repository, you can use the BatchPutDocument API to add documents directly to an index. FAQs : Kendra supports indexing FAQ files stored in Amazon S3 in various formats, such as CSV and JSON, allowing for quick retrieval of commonly asked questions. Search Functionality : Users can perform searches using natural language queries, keyword searches, or queries with specific criteria for filtering responses. Kendra uses all document information, including metadata, to determine relevance. Customizable Search Experience : Kendra allows you to create custom fields and use existing document fields to filter and sort search results. You can adjust relevance to fine-tune search results based on field importance. Security : Kendra integrates with AWS Identity and Access Management (IAM) to manage access to indexes and documents, ensuring search results reflect your organization's security model. Integration with AWS Services : Amazon Kendra integrates with other AWS services like Amazon Lex, enabling the creation of chatbots that can answer user queries by searching Kendra indexes.","title":"What is Kendra?"},{"location":"TS1-2/kendra/#getting-started-with-kendra","text":"","title":"Getting started with Kendra"},{"location":"TS1-2/kendra/#enriching-of-documents","text":"To enrich documents during ingestion with Amazon Kendra, you can use the Custom Document Enrichment feature. Here\u2019s how it works: - Inline Configurations: You can apply basic logic or inline configurations to modify your document metadata and content during the ingestion process. This might include operations like scrubbing personally identifiable information or adding metadata. - Lambda Functions: For more advanced data manipulations, you can invoke AWS Lambda functions during the document ingestion. Lambda functions can perform tasks like Optical Character Recognition (OCR) on images, translation of text, or extracting text from images. These functions allow for complex operations that go beyond simple metadata manipulation.","title":"Enriching of Documents"},{"location":"TS1-2/kendra/#data-flow","text":"Configuration: You configure Custom Document Enrichment either when creating or updating your data source or when directly indexing documents into Amazon Kendra. Basic Operations: Amazon Kendra first applies any inline configurations or basic logic you\u2019ve set to alter your data. Advanced Manipulations: If advanced data manipulation is required, Kendra applies Lambda functions to either the original raw documents or the structured parsed documents, depending on your configuration. Ingestion: The modified documents are then ingested into Amazon Kendra. Validation: If the configuration for enrichment is not valid at any point, Amazon Kendra will throw an error, ensuring only correctly configured documents are ingested\u200b","title":"Data Flow:"},{"location":"TS1-2/kendra/#quotas","text":"Quota Description Default Limit Edition Adjustable Index Quotas Maximum number of indexes per account 10 Developer, Enterprise Yes Amount of text extracted for an index in a single unit 3 GB Developer No Amount of text extracted for an index in a single unit 30 GB Enterprise Yes Data Source Connector Quotas Maximum number of data source connectors per index 5 Developer No Maximum number of data source connectors per index 50 Enterprise Yes Maximum size of a single document or raw file 50 MB Developer, Enterprise Yes Maximum number of S3 prefixes in the access control list 100 Developer, Enterprise No FAQ Quotas Maximum number of FAQs per index 30 Developer, Enterprise Yes Maximum size of 1 FAQ 5 MB Developer, Enterprise Yes Maximum number of results returned for FAQ 4 Developer, Enterprise Yes Maximum number of characters allowed for an FAQ question 300 Developer, Enterprise No Maximum number of characters in an FAQ answer 2000 Developer, Enterprise No Thesaurus Quotas Maximum number of thesauri per index 1 Developer, Enterprise No Maximum size of a thesaurus file 5 MB Developer, Enterprise Yes Maximum number of synonym rules per thesaurus 10,000 Developer, Enterprise Yes Maximum number of synonyms per term in all thesauri 10 Developer, Enterprise No Amazon Kendra Experience Quotas Maximum number of Amazon Kendra experiences per index 50 Developer, Enterprise Yes Query and Search Results Quotas Amount of queries per second for an index in a single unit 0.05 (Developer), 0.1 (Enterprise) Developer, Enterprise Yes Maximum number of characters per query text 1000 Developer, Enterprise Yes Maximum number of search results per query 100 Developer, Enterprise Yes Maximum number of search results per page 100 Developer, Enterprise Yes Query Suggestions Quotas Maximum number of query suggestions returned per call 10 Developer, Enterprise Yes Maximum number of fields/attributes for query suggestions 10 Developer, Enterprise Yes Maximum size of a block list text file 2 MB Developer, Enterprise Yes Maximum number of items in a block list 20,000 Developer, Enterprise Yes Document Quotas Maximum size of a single document or raw file using BatchPutDocument API 5 MB Developer, Enterprise Yes Maximum amount of text extracted from a single document 5 MB Developer, Enterprise No Maximum number of custom fields/attributes per index 500 Developer, Enterprise No","title":"Quotas"},{"location":"TS1-2/kendra/#pricing","text":"Amazon Kendra pricing is based on several factors, including the number of indexes created, the volume of documents indexed, the frequency of queries, and the specific edition of Kendra being used. Here\u2019s an overview of how Amazon Kendra pricing works:","title":"Pricing"},{"location":"TS1-2/kendra/#1-editions","text":"Amazon Kendra offers two main editions: - Developer Edition : This edition is intended for smaller-scale development and testing purposes. It is less expensive and comes with a lower capacity limit for indexes, documents, and queries. - Enterprise Edition : This edition is designed for production use in larger-scale environments. It offers higher capacity limits and additional features suitable for enterprise-scale applications.","title":"1. Editions"},{"location":"TS1-2/kendra/#2-pricing-components","text":"Amazon Kendra pricing consists of several components, which vary depending on the edition: Indexing : Documents Indexed : The cost of indexing documents depends on the amount of text extracted from the documents. The Developer Edition includes up to 3 GB of extracted text, while the Enterprise Edition includes up to 30 GB. If you exceed these amounts, additional charges apply based on the volume of text processed. Frequency of Index Synchronization : When you synchronize an index with a data source, there are additional costs based on the number of times synchronization occurs. More frequent synchronization leads to higher costs. Queries : Number of Queries : Amazon Kendra charges based on the number of queries made to the index. The Developer Edition allows for a limited number of queries (up to approximately 4,000 queries per day or 0.05 queries per second). The Enterprise Edition allows for more queries (up to approximately 8,000 queries per day or 0.1 queries per second). Exceeding these limits will incur additional costs. Query Suggestions : If you use Amazon Kendra\u2019s query suggestions feature, there are additional costs based on the number of query suggestions returned. Storage : Document Storage : The storage of documents and indexed content in Amazon Kendra is also a pricing component. The size of the stored data influences the cost, particularly if the amount of data stored exceeds the quota included with the index. Thesauri and FAQs : Custom Thesauri : Creating and using custom thesauri involves additional charges based on the number of synonyms and the size of the thesaurus file. FAQs : Adding FAQ documents to an index also has associated costs, particularly if the number of FAQs exceeds the allowed quota.","title":"2. Pricing Components"},{"location":"TS1-2/kendra/#3-additional-features-and-charges","text":"Amazon Kendra Experiences : Creating experiences (custom search experiences that are surfaced in different interfaces) incurs additional charges depending on the number and type of experiences created. Data Source Connectors : Using connectors to ingest data from various repositories can also lead to additional costs, particularly when using connectors that are outside of the free data sources provided. Document Enrichment : If you utilize Custom Document Enrichment, which involves running AWS Lambda functions to process and enrich documents during ingestion, you will incur additional costs for the compute time and resources used by Lambda.","title":"3. Additional Features and Charges"},{"location":"TS1-2/kendra/#4-free-tier","text":"Amazon Kendra offers a free tier for the Developer Edition, which includes: - 750 hours of use for the first 30 days. - Up to 5 indexes with up to 5 data sources each. - 10,000 documents or 3 GB of extracted text . This free tier is ideal for new users to explore Kendra and develop initial search applications without incurring costs.","title":"4. Free Tier"},{"location":"TS1-2/kendra/#5-region-based-pricing","text":"Pricing for Amazon Kendra may vary slightly depending on the AWS region where the service is being used. It is important to check the specific pricing for your region on the AWS pricing page.","title":"5. Region-Based Pricing"},{"location":"TS1-2/kendra/#6-monitoring-and-controlling-costs","text":"To manage costs effectively, you can: - Monitor Usage : Use AWS CloudWatch to track usage and spending. - Set Budgets and Alerts : Use AWS Budgets to set usage limits and receive notifications when nearing these limits. - Optimize Usage : Choose the appropriate edition, features, and data sources based on your specific needs and budget.","title":"6. Monitoring and Controlling Costs"},{"location":"TS1-2/polly/","text":"Amazon Polly Documentation Getting Started with Polly Comparison of the Amazon Polly voice engines Feature Generative Long-Form Neural Standard Description Most human-like, emotionally engaged, and adaptive. Designed for longer content with high expressiveness. Utilizes deep learning for natural speech synthesis. Basic text-to-speech synthesis. Technology Large Language Model (LLM) with a billion-parameter transformer. Deep learning model for phonemes and prosody. Neural TTS (Text-to-Speech) technology. Rule-based TTS technology. Use Cases Virtual assistants, trainers, and advertising. News articles, training materials, marketing videos. Interactive applications, newscasters, customer service. General purpose, wide variety of applications. SSML Support Limited SSML support. Supports many (but not all) SSML tags. Full SSML support. Full SSML support. Audio Output Formats MP3, OGG, PCM with 24 kHz default sampling rate. MP3, OGG, PCM with 24 kHz default sampling rate. MP3, OGG, PCM with various sampling rates. MP3, OGG, PCM with various sampling rates. Voice Options 2 Female, 1 Male (English) 2 Female, 1 Male (English US) Multiple voices in various languages. Multiple voices in various languages. Region Availability Limited to US East (N. Virginia) and Europe (Frankfurt). US East (N. Virginia) only. Widely available across multiple AWS regions. Widely available across multiple AWS regions. Pricing Higher cost, details on Amazon Polly pricing page. Higher cost, details on Amazon Polly pricing page. Varies by voice and usage; generally higher than Standard. Lower cost compared to other engines. Other Features No support for newscaster style, potential for slight variations in voice with model updates. Supports real-time and asynchronous synthesis, designed for long-form content. Supports newscaster style, bilingual voices available. No special features. SSML and Amazon Polly Speech Synthesis Markup Language (SSML) allows you to control various aspects of speech synthesis with Amazon Polly, such as pronunciation, intonation, volume, pitch, and speaking rate. Here are some examples of how you can use SSML with Amazon Polly Examples <speak> Hello, welcome to the world of <emphasis>text-to-speech</emphasis>! </speak> <speak> This is a normal speaking rate. <prosody rate=\"slow\">This is a slow speaking rate.</prosody> <prosody rate=\"fast\">And this is a fast speaking rate.</prosody> </speak> <speak> <prosody pitch=\"high\">This is a high pitch.</prosody> <prosody pitch=\"low\">This is a low pitch.</prosody> <prosody volume=\"x-loud\">This is very loud.</prosody> <prosody volume=\"soft\">This is soft.</prosody> </speak> <speak> This is a sentence with a short pause. <break time=\"500ms\"/> This sentence comes after a half-second pause. </speak> Lexicons Lexicons in Amazon Polly are custom pronunciation dictionaries that allow you to control how specific words are pronounced during speech synthesis. They are especially useful when dealing with proper nouns, technical jargon, or any other words that may not be pronounced correctly by default. By creating a lexicon, you can ensure that Amazon Polly reads these words accurately according to your requirements. A lexicon is an XML file that specifies pronunciation instructions for words or phrases. It uses the Pronunciation Lexicon Specification (PLS) format, which is a standard defined by the W3C. A lexicon can include: Phonetic Transcriptions: Specifies the pronunciation of a word using phonetic alphabets like the International Phonetic Alphabet (IPA) or X-SAMPA. Alternative Pronunciations: Provides multiple pronunciations for a word, which can be selected based on the context. Alias: Maps a word to a different pronunciation or a synonym. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <lexicon version=\"1.0\" xmlns=\"http://www.w3.org/2005/01/pronunciation-lexicon\" alphabet=\"ipa\" xml:lang=\"en-US\"> <lexeme> <grapheme>Amazon</grapheme> <phoneme>\u02c8\u00e6m\u0259z\u0252n</phoneme> </lexeme> <lexeme> <grapheme>Polly</grapheme> <phoneme>\u02c8p\u0252li</phoneme> </lexeme> </lexicon> Lexicons in Amazon Polly are custom pronunciation dictionaries that allow you to control how specific words are pronounced during speech synthesis. They are especially useful when dealing with proper nouns, technical jargon, or any other words that may not be pronounced correctly by default. By creating a lexicon, you can ensure that Amazon Polly reads these words accurately according to your requirements. Upload the Lexicon to Amazon Polly: - You can upload the lexicon using the AWS Management Console, AWS CLI, or SDKs. - AWS CLI Command Example: ```sh aws polly put-lexicon --name MyLexicon --content file://mylexicon.xml ``` This command uploads a lexicon named \"MyLexicon\" from a local file mylexicon.xml . Referencing Lexicons in Speech Synthesis Requests: - After uploading, you can reference the lexicon in your speech synthesis requests. - Here is an example using SSML: ```xml <speak> Using a lexicon to correctly pronounce the words: <lexicon uri=\"https://polly.us-east-1.amazonaws.com/v1/lexicons/MyLexicon\"/> Welcome to Amazon Polly, your speech synthesis service. </speak> ``` In this example, the <lexicon> tag refers to the lexicon \"MyLexicon\" hosted on Amazon Polly. Polly uses this lexicon to pronounce the words defined in it. Managing Lexicons: - You can list, delete, or update lexicons using the AWS Management Console, AWS CLI, or SDKs. - List Lexicons Example (AWS CLI): ```sh aws polly list-lexicons ``` This command lists all the lexicons associated with your AWS account in the region. Benefits of Using Lexicons Customization: Lexicons allow you to tailor speech synthesis to better match the pronunciation needs of your content, making it sound more natural and accurate. Consistency: Ensures consistent pronunciation of specific words across different Polly voices and engines. Flexibility: Useful for applications that involve domain-specific language, names, acronyms, or uncommon words. Practical Applications Corporate Branding: Ensuring company names and products are pronounced correctly. Educational Tools: Customizing pronunciation for educational content, like language learning apps. Accessibility: Improving speech output for screen readers or other assistive technologies by providing correct pronunciations. Quotas Lexicon Operations Operation Limit DeleteLexicon, PutLexicon, GetLexicon, 2 transactions per second (tps) combined; max burst of 4 tps ListLexicons Speech Operations Operation Limit DescribeVoices 80 tps with a burst limit of 100 tps SynthesizeSpeech Generative voice: 8 tps; Long-form voice: 8 tps with a burst limit of 10 tps; Neural voice: 8 tps with a burst limit of 10 tps; Standard voice: 80 tps with a burst limit of 100 tps StartSpeechSynthesisTask Generative voice: 1 tps; Long-form voice: 1 tps; Neural voice: 1 tps; Standard voice: 10 tps with a burst limit of 12 tps GetSynthesizeSpeechTask and ListSynthesizeSpeechTask Maximum 10 tps combined Concurrent Requests Generative voice: up to 26 concurrent requests; Long-form voice: up to 26 concurrent requests; Neural voice: up to 18 concurrent requests; Standard voice: up to 80 concurrent requests Pricing Pricing Based on Voice Type Amazon Polly offers four types of voice engines, each with different pricing: Standard Voices: Pricing: Lower cost per million characters. Usage: Suitable for basic text-to-speech applications. These voices are less natural compared to neural voices but are more cost-effective. Neural Voices (NTTS): Pricing: Higher cost per million characters than standard voices. Usage: Offers more natural and human-like speech. Neural Text-to-Speech (NTTS) is ideal for applications requiring high-quality voice output, such as voice assistants and interactive applications. Long-Form Voices: Pricing: Similar to neural voices, generally higher due to their enhanced quality and suitability for longer content. Usage: Optimized for reading long passages, such as articles or books, providing natural-sounding speech for extended listening. Generative Voices: Pricing: Generally the highest cost due to their advanced capabilities and adaptive, human-like speech patterns. Usage: Best for applications needing highly interactive or emotionally engaging speech, such as virtual assistants or personalized content delivery. Character Count for Pricing Amazon Polly pricing is based on the number of characters processed: Character Count: Each character used in your input text (including spaces and punctuation) counts towards your character usage. SSML tags are not counted in the character count unless they modify the output (e.g., <break> tags are not counted, but <emphasis> is).","title":"Amazon Polly"},{"location":"TS1-2/polly/#amazon-polly","text":"Documentation","title":"Amazon Polly"},{"location":"TS1-2/polly/#getting-started-with-polly","text":"","title":"Getting Started with Polly"},{"location":"TS1-2/polly/#comparison-of-the-amazon-polly-voice-engines","text":"Feature Generative Long-Form Neural Standard Description Most human-like, emotionally engaged, and adaptive. Designed for longer content with high expressiveness. Utilizes deep learning for natural speech synthesis. Basic text-to-speech synthesis. Technology Large Language Model (LLM) with a billion-parameter transformer. Deep learning model for phonemes and prosody. Neural TTS (Text-to-Speech) technology. Rule-based TTS technology. Use Cases Virtual assistants, trainers, and advertising. News articles, training materials, marketing videos. Interactive applications, newscasters, customer service. General purpose, wide variety of applications. SSML Support Limited SSML support. Supports many (but not all) SSML tags. Full SSML support. Full SSML support. Audio Output Formats MP3, OGG, PCM with 24 kHz default sampling rate. MP3, OGG, PCM with 24 kHz default sampling rate. MP3, OGG, PCM with various sampling rates. MP3, OGG, PCM with various sampling rates. Voice Options 2 Female, 1 Male (English) 2 Female, 1 Male (English US) Multiple voices in various languages. Multiple voices in various languages. Region Availability Limited to US East (N. Virginia) and Europe (Frankfurt). US East (N. Virginia) only. Widely available across multiple AWS regions. Widely available across multiple AWS regions. Pricing Higher cost, details on Amazon Polly pricing page. Higher cost, details on Amazon Polly pricing page. Varies by voice and usage; generally higher than Standard. Lower cost compared to other engines. Other Features No support for newscaster style, potential for slight variations in voice with model updates. Supports real-time and asynchronous synthesis, designed for long-form content. Supports newscaster style, bilingual voices available. No special features.","title":"Comparison of the Amazon Polly voice engines"},{"location":"TS1-2/polly/#ssml-and-amazon-polly","text":"Speech Synthesis Markup Language (SSML) allows you to control various aspects of speech synthesis with Amazon Polly, such as pronunciation, intonation, volume, pitch, and speaking rate. Here are some examples of how you can use SSML with Amazon Polly Examples <speak> Hello, welcome to the world of <emphasis>text-to-speech</emphasis>! </speak> <speak> This is a normal speaking rate. <prosody rate=\"slow\">This is a slow speaking rate.</prosody> <prosody rate=\"fast\">And this is a fast speaking rate.</prosody> </speak> <speak> <prosody pitch=\"high\">This is a high pitch.</prosody> <prosody pitch=\"low\">This is a low pitch.</prosody> <prosody volume=\"x-loud\">This is very loud.</prosody> <prosody volume=\"soft\">This is soft.</prosody> </speak> <speak> This is a sentence with a short pause. <break time=\"500ms\"/> This sentence comes after a half-second pause. </speak>","title":"SSML and Amazon Polly"},{"location":"TS1-2/polly/#lexicons","text":"Lexicons in Amazon Polly are custom pronunciation dictionaries that allow you to control how specific words are pronounced during speech synthesis. They are especially useful when dealing with proper nouns, technical jargon, or any other words that may not be pronounced correctly by default. By creating a lexicon, you can ensure that Amazon Polly reads these words accurately according to your requirements. A lexicon is an XML file that specifies pronunciation instructions for words or phrases. It uses the Pronunciation Lexicon Specification (PLS) format, which is a standard defined by the W3C. A lexicon can include: Phonetic Transcriptions: Specifies the pronunciation of a word using phonetic alphabets like the International Phonetic Alphabet (IPA) or X-SAMPA. Alternative Pronunciations: Provides multiple pronunciations for a word, which can be selected based on the context. Alias: Maps a word to a different pronunciation or a synonym. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <lexicon version=\"1.0\" xmlns=\"http://www.w3.org/2005/01/pronunciation-lexicon\" alphabet=\"ipa\" xml:lang=\"en-US\"> <lexeme> <grapheme>Amazon</grapheme> <phoneme>\u02c8\u00e6m\u0259z\u0252n</phoneme> </lexeme> <lexeme> <grapheme>Polly</grapheme> <phoneme>\u02c8p\u0252li</phoneme> </lexeme> </lexicon> Lexicons in Amazon Polly are custom pronunciation dictionaries that allow you to control how specific words are pronounced during speech synthesis. They are especially useful when dealing with proper nouns, technical jargon, or any other words that may not be pronounced correctly by default. By creating a lexicon, you can ensure that Amazon Polly reads these words accurately according to your requirements. Upload the Lexicon to Amazon Polly: - You can upload the lexicon using the AWS Management Console, AWS CLI, or SDKs. - AWS CLI Command Example: ```sh aws polly put-lexicon --name MyLexicon --content file://mylexicon.xml ``` This command uploads a lexicon named \"MyLexicon\" from a local file mylexicon.xml . Referencing Lexicons in Speech Synthesis Requests: - After uploading, you can reference the lexicon in your speech synthesis requests. - Here is an example using SSML: ```xml <speak> Using a lexicon to correctly pronounce the words: <lexicon uri=\"https://polly.us-east-1.amazonaws.com/v1/lexicons/MyLexicon\"/> Welcome to Amazon Polly, your speech synthesis service. </speak> ``` In this example, the <lexicon> tag refers to the lexicon \"MyLexicon\" hosted on Amazon Polly. Polly uses this lexicon to pronounce the words defined in it. Managing Lexicons: - You can list, delete, or update lexicons using the AWS Management Console, AWS CLI, or SDKs. - List Lexicons Example (AWS CLI): ```sh aws polly list-lexicons ``` This command lists all the lexicons associated with your AWS account in the region.","title":"Lexicons"},{"location":"TS1-2/polly/#benefits-of-using-lexicons","text":"Customization: Lexicons allow you to tailor speech synthesis to better match the pronunciation needs of your content, making it sound more natural and accurate. Consistency: Ensures consistent pronunciation of specific words across different Polly voices and engines. Flexibility: Useful for applications that involve domain-specific language, names, acronyms, or uncommon words.","title":"Benefits of Using Lexicons"},{"location":"TS1-2/polly/#practical-applications","text":"Corporate Branding: Ensuring company names and products are pronounced correctly. Educational Tools: Customizing pronunciation for educational content, like language learning apps. Accessibility: Improving speech output for screen readers or other assistive technologies by providing correct pronunciations.","title":"Practical Applications"},{"location":"TS1-2/polly/#quotas","text":"Lexicon Operations Operation Limit DeleteLexicon, PutLexicon, GetLexicon, 2 transactions per second (tps) combined; max burst of 4 tps ListLexicons Speech Operations Operation Limit DescribeVoices 80 tps with a burst limit of 100 tps SynthesizeSpeech Generative voice: 8 tps; Long-form voice: 8 tps with a burst limit of 10 tps; Neural voice: 8 tps with a burst limit of 10 tps; Standard voice: 80 tps with a burst limit of 100 tps StartSpeechSynthesisTask Generative voice: 1 tps; Long-form voice: 1 tps; Neural voice: 1 tps; Standard voice: 10 tps with a burst limit of 12 tps GetSynthesizeSpeechTask and ListSynthesizeSpeechTask Maximum 10 tps combined Concurrent Requests Generative voice: up to 26 concurrent requests; Long-form voice: up to 26 concurrent requests; Neural voice: up to 18 concurrent requests; Standard voice: up to 80 concurrent requests","title":"Quotas"},{"location":"TS1-2/polly/#pricing","text":"Pricing Based on Voice Type Amazon Polly offers four types of voice engines, each with different pricing: Standard Voices: Pricing: Lower cost per million characters. Usage: Suitable for basic text-to-speech applications. These voices are less natural compared to neural voices but are more cost-effective. Neural Voices (NTTS): Pricing: Higher cost per million characters than standard voices. Usage: Offers more natural and human-like speech. Neural Text-to-Speech (NTTS) is ideal for applications requiring high-quality voice output, such as voice assistants and interactive applications. Long-Form Voices: Pricing: Similar to neural voices, generally higher due to their enhanced quality and suitability for longer content. Usage: Optimized for reading long passages, such as articles or books, providing natural-sounding speech for extended listening. Generative Voices: Pricing: Generally the highest cost due to their advanced capabilities and adaptive, human-like speech patterns. Usage: Best for applications needing highly interactive or emotionally engaging speech, such as virtual assistants or personalized content delivery. Character Count for Pricing Amazon Polly pricing is based on the number of characters processed: Character Count: Each character used in your input text (including spaces and punctuation) counts towards your character usage. SSML tags are not counted in the character count unless they modify the output (e.g., <break> tags are not counted, but <emphasis> is).","title":"Pricing"},{"location":"TS1-2/practical-use-cases-for-AI/","text":"Practical Uses case for AI Disclaimer - Some content is generated by AI bots Why AI is beneficial? Works continuously without performance decrease Handles repetitive, tedious tasks Decreases employee workload Streamlines business operations Solves complex problems using vast amounts of data Detects patterns and fraud Reduces waste through demand forecasting Improves decision-making and efficiency When should AI not be used? High resource consumption for training Costly processing power Frequent model retraining needs When costs outweigh benefits Considerations for AI Implementation: Need for model interpretability in decision-making Trade-off between complexity and interpretability Compliance requirements for transparency Rule-based systems as alternatives AI vs. Rule-Based Systems: Rule-based systems are deterministic AI models are probabilistic AI learns and adapts over time AI incorporates randomness Deterministic outputs require rule-based systems Types of ML The broad category of Machine learning are Supervised Learning Unsupervised Learning Semi-supervised Learning Reinforcement Learning Supervised Learning Supervised learning is a type of machine learning where the model is trained on labeled data. This means the input data is paired with the correct output, allowing the model to learn by comparing its predictions with the actual outcomes. It is further divided into two categories based on the type of target variable: Continuous Target Variable : When the target variable is continuous (numeric), regression algorithms are used. An example provided is predicting \"Housing Price\". Categorical Target Variable : When the target variable is categorical (belongs to a class or category), classification algorithms are employed. An example provided is \"Medical Imaging\". Unsupervised Learning Unsupervised learning deals with unlabeled data. The model tries to learn the patterns and structure from the input data without any explicit instructions on what to predict. Target Variables are not available : This indicates there are no labels for the data. Unsupervised learning can be broken down into: Clustering : This technique groups similar data points together. An example is \"Customer Segmentation\". Association : This technique finds rules that describe large portions of the data. An example is \"Market classification analysis\". Semi-supervised Learning Semi-supervised learning is a hybrid approach that uses a small amount of labeled data and a large amount of unlabeled data for training. This approach is beneficial when labeling data is expensive or time-consuming. Categorical Target Variable : Even though the target variable is categorical, not all the data points are labeled. Classification : The model learns to classify data based on a mix of labeled and unlabeled data. An example given is \"Text Classification\". Clustering : Similar to unsupervised learning, it also groups data, but with some initial labeled data points to guide the process. An example is \"Lane Finding on GPS data\". Reinforcement Learning Reinforcement learning is a type of machine learning where an agent learns to make decisions by performing actions in an environment to achieve maximum cumulative reward. It is unique because it focuses on learning the optimal behavior in a specific context, based on the rewards or punishments received. Categorical Target Variable : The actions can be seen as making classifications or decisions, which are then rewarded or punished. Classification : In reinforcement learning, the decision-making process can be viewed as a classification problem where actions are categorized. An example provided is \"Optimized Marketing\". Target Variable not available : This indicates scenarios where the model must control the environment without specific target variables. Control : Here, the model controls an environment directly to optimize certain behaviors or outcomes, such as in \"Driverless Cars\".","title":"Practical Uses case for AI"},{"location":"TS1-2/practical-use-cases-for-AI/#practical-uses-case-for-ai","text":"Disclaimer - Some content is generated by AI bots","title":"Practical Uses case for AI"},{"location":"TS1-2/practical-use-cases-for-AI/#why-ai-is-beneficial","text":"Works continuously without performance decrease Handles repetitive, tedious tasks Decreases employee workload Streamlines business operations Solves complex problems using vast amounts of data Detects patterns and fraud Reduces waste through demand forecasting Improves decision-making and efficiency","title":"Why AI is beneficial?"},{"location":"TS1-2/practical-use-cases-for-AI/#when-should-ai-not-be-used","text":"High resource consumption for training Costly processing power Frequent model retraining needs When costs outweigh benefits","title":"When should AI not be used?"},{"location":"TS1-2/practical-use-cases-for-AI/#considerations-for-ai-implementation","text":"Need for model interpretability in decision-making Trade-off between complexity and interpretability Compliance requirements for transparency Rule-based systems as alternatives","title":"Considerations for AI Implementation:"},{"location":"TS1-2/practical-use-cases-for-AI/#ai-vs-rule-based-systems","text":"Rule-based systems are deterministic AI models are probabilistic AI learns and adapts over time AI incorporates randomness Deterministic outputs require rule-based systems","title":"AI vs. Rule-Based Systems:"},{"location":"TS1-2/practical-use-cases-for-AI/#types-of-ml","text":"The broad category of Machine learning are Supervised Learning Unsupervised Learning Semi-supervised Learning Reinforcement Learning Supervised Learning Supervised learning is a type of machine learning where the model is trained on labeled data. This means the input data is paired with the correct output, allowing the model to learn by comparing its predictions with the actual outcomes. It is further divided into two categories based on the type of target variable: Continuous Target Variable : When the target variable is continuous (numeric), regression algorithms are used. An example provided is predicting \"Housing Price\". Categorical Target Variable : When the target variable is categorical (belongs to a class or category), classification algorithms are employed. An example provided is \"Medical Imaging\". Unsupervised Learning Unsupervised learning deals with unlabeled data. The model tries to learn the patterns and structure from the input data without any explicit instructions on what to predict. Target Variables are not available : This indicates there are no labels for the data. Unsupervised learning can be broken down into: Clustering : This technique groups similar data points together. An example is \"Customer Segmentation\". Association : This technique finds rules that describe large portions of the data. An example is \"Market classification analysis\". Semi-supervised Learning Semi-supervised learning is a hybrid approach that uses a small amount of labeled data and a large amount of unlabeled data for training. This approach is beneficial when labeling data is expensive or time-consuming. Categorical Target Variable : Even though the target variable is categorical, not all the data points are labeled. Classification : The model learns to classify data based on a mix of labeled and unlabeled data. An example given is \"Text Classification\". Clustering : Similar to unsupervised learning, it also groups data, but with some initial labeled data points to guide the process. An example is \"Lane Finding on GPS data\". Reinforcement Learning Reinforcement learning is a type of machine learning where an agent learns to make decisions by performing actions in an environment to achieve maximum cumulative reward. It is unique because it focuses on learning the optimal behavior in a specific context, based on the rewards or punishments received. Categorical Target Variable : The actions can be seen as making classifications or decisions, which are then rewarded or punished. Classification : In reinforcement learning, the decision-making process can be viewed as a classification problem where actions are categorized. An example provided is \"Optimized Marketing\". Target Variable not available : This indicates scenarios where the model must control the environment without specific target variables. Control : Here, the model controls an environment directly to optimize certain behaviors or outcomes, such as in \"Driverless Cars\".","title":"Types of ML"},{"location":"TS1-2/sagemaker/","text":"","title":"Sagemaker"},{"location":"TS1-2/translate/","text":"Amazon Translate Translates between 75 languages.","title":"Amazon Translate"},{"location":"TS1-2/translate/#amazon-translate","text":"Translates between 75 languages.","title":"Amazon Translate"}]}